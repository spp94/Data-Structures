import java.util.NoSuchElementException;

public class LinkedList{
	private class Node{
		private int value;
		private Node next;
		public Node(int value){
			this.value = value;
		}
	}
	private Node first, last;
	private int size = 0;
	
	private boolean isEmpty(){
		return first == null;
	}
	
	private Node getPreviousNode(Node node){
		Node current = first;
		while(current != null){
			if(current.next.value == node.value){
				return current;
			}
			else{
				current = current.next;
			}
		}
		return null;
	}
	
	private Node getPreviousNode(int index){
		int count = 0;
		if(index > size){
			return last;
		}
		else{
			Node current = first;
			while(current != null){
				if(count == index-1){
					return current;
				}
				else{
					current = current.next;
				}
				count++;
			}
		}
		return null;
	}
	

	public void add(int item){
		Node node = new Node(item);
		if(isEmpty()){
			first = last = node;
			first.next = last.next = null;
		}
		else if(first == last){
			first.next = node;
			last = node;
			last.next = null;
		}
		else{
			last.next = node;
			last = node;
			}
		size++;
		}
	
	public void addFirst(int item){
		Node node = new Node(item);
		if(isEmpty()){
			first = last = node;
		}
		else{
			node.next = first;
			first = node;
		}
		size++;
	}

	public void addLast(int item){
		Node node = new Node(item);
		if(isEmpty()){
			first = last = node;
		}
		else{
			last.next = node;
			last = node;
		}
		size++;
	}

	public void add(int index, int item){
		 if(index > size){
			 Node node = new Node(item);
			 last.next = node;
			 last = node;
		 }
		 else{
			 Node node = new Node(item);
			 Node prevNode = getPreviousNode(index);
			 node.next = prevNode.next;
			 prevNode.next = node;
		 }
		 size++;
	}
	
	
	public void removeFirst(){
		if(isEmpty()){
			throw new NoSuchElementException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			Node node = first.next;
			first.next = null;
			first = node;
		}
		size--;
	}
	
	public void removeLast(){
		if(isEmpty()){
			throw new NoSuchElementException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			Node node = getPreviousNode(last);
			node.next = null;
			last = node;
		}
		size--;
	}
	
	public void remove(){
		if(isEmpty()){
			throw new NoSuchElementException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			first = first.next; 
		}
		size--;
	}
	
	public void remove(int index){
		if(index > size || isEmpty()){
			throw new NoSuchElementException();
		}
		else if(first == last){
			first = last = null;
		}
		else{
			Node node = getPreviousNode(index);
			node.next = node.next.next;
		}
		size--;
	}
	
	

	public void print(){
		Node current = first;
		while(current != null){
			System.out.print(current.value+" ");
			current = current.next;
		}
		System.out.println();
	}

	public int size(){
		return size;
	}
	
	public int indexOf(int item){
		Node node = first;
		int count = 0;
		while(node != null){
			if(node.value == item){
				return count;
			}
			else{
				count++;
				node = node.next;
			}
		}
		return -1;
	}
	
	public boolean contains(int item){
		return indexOf(item) != -1;
	}
}